/*
  ** 0    -- 600px        --> phone
  ** 600  -- 900px        --> Tablet Portrait
  ** 900  -- 1200px       --> Tablet Landscape
  ** 1200 -- 1800px       --> Normal Style and displays
  ** More 1800px          --> Large Desktop
*/
/*
  * If we make our product for mobile, so we use (min-width)
  * If we make our product for computer, so we use (max-width)
  * (min-width) --> start from this point to the next point
  * (max-width) --> start from previous point and stop at this point
  * in media query, order of writing media query code is very important
*/
@keyframes moveInLeft {
  0% {
    /* here it will be invisible and start from 100 px from left */
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    /* then it will be mid visible and still move from left 100px to right 10px */
    transform: translateX(1rem); }
  100% {
    /* then it will stop and be visible and move from right 10px to it's original place 0px */
    opacity: 1;
    transform: translate(0px); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0px); } }

@keyframes moveInBottom {
  0% {
    transform: translateY(3rem);
    opacity: 0; }
  100% {
    transform: translate(0px);
    opacity: 1; } }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 1.6rem;
  line-height: 1.7;
  color: #777; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    /* animation name */
    animation-duration: 1s;
    /* animation duration */
    animation-timing-function: ease-out;
    /* Working Mechanism of this animation */ }
    @media (max-width: 37.5em) {
      .heading-primary--main {
        letter-spacing: 1rem;
        font-family: 5rem; } }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out;
    /* animation short code like as in (.heading-primary-main) */ }
    @media (max-width: 37.5em) {
      .heading-primary--sub {
        letter-spacing: 0.5rem; } }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  /* this used to tell browser fit background-image for text */
  color: transparent;
  letter-spacing: 0.2rem;
  transition: all 0.2s; }
  @media only screen and (max-width: 56.25em) {
    .heading-secondary {
      font-size: 3rem; } }
  @media (max-width: 37.5em) {
    .heading-secondary {
      font-size: 2.5rem; } }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center !important; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem !important; }

.u-margin-bottom-mid {
  margin-bottom: 4rem !important; }
  @media only screen and (max-width: 56.25em) {
    .u-margin-bottom-mid {
      margin-bottom: 3rem !important; } }

.u-margin-bottom-big {
  margin-bottom: 8rem !important; }
  @media only screen and (max-width: 56.25em) {
    .u-margin-bottom-big {
      margin-bottom: 5rem !important; } }

.u-margin-top-big {
  margin-top: 8rem !important; }

.u-margin-top-huge {
  margin-top: 10rem !important; }

html {
  /* 
    * (rem)--> mean root element, it take the size of font-size value of the root element
                2 rem --> here it mean --> it will convert 62.5% to pixel value (62.5% * 16px) = (10px)
                          then calculate rem --> 2 * 10px it will be (20px).
    * we use rem to make our design more responsive because all pixels of our app
       is depend on single value of the root element,
       so if we maximize or minimize the design still responsive            
    */
  font-size: 62.5%;
  /* we define font-size here to be able to use (rem) for all next element */ }
  @media only screen and (max-width: 75em) {
    html {
      font-size: 50%; } }
  @media only screen and (max-width: 56.25em) {
    html {
      font-size: 56.25%; } }
  @media only screen and (min-width: 112.5em) {
    html {
      font-size: 75%; } }

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* inherit here tell all element to inherit (box-sizing) value from the parent element, 
      it will inherit it's value from the nearest parent till it reach the defined value in body */
  box-sizing: inherit; }

body {
  box-sizing: border-box;
  padding: 3rem; }
  @media only screen and (max-width: 56.25em) {
    body {
      padding: 0rem; } }

.btn, .btn:link, .btn:visited {
  font-size: 1.6rem;
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  transition: all 0.2s;
  border-radius: 10rem;
  position: relative;
  outline: none;
  border: none;
  cursor: pointer; }

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; }

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
  .btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0; }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn--green {
  background-color: #55c57a;
  color: #fff; }
  .btn--green::after {
    background-color: #55c57a; }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  /* normal animation it will make the element go to the 0% position from it's current position
      and start the animation, we show this transition, so if we don't need this,
      then we will use this property
      it will make the element disappear and go to the 0% position then start the animation
      without we show this transition
    */
  animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 0.1rem solid #55c57a;
  padding: 0.3rem;
  transition: all 0.2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-0.2rem); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translate(0); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1 0.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 0.2rem;
    position: absolute;
    transition: all 0.2s;
    outline-offset: 2rem;
    /* this make a gap between element and it's border or outline */
    z-index: 10; }
    @media only screen and (max-width: 56.25em) {
      .composition__photo {
        float: left;
        position: relative;
        width: 33.33333333%;
        box-shadow: 0 1.5rem 3rem rgba(0, 0, 0, 0.2);
        outline-offset: 1rem; } }
    .composition__photo--p1 {
      top: -1rem;
      left: 0; }
      @media only screen and (max-width: 56.25em) {
        .composition__photo--p1 {
          top: 0;
          transform: scale(1.2); } }
    .composition__photo--p2 {
      top: 2rem;
      right: 0; }
      @media only screen and (max-width: 56.25em) {
        .composition__photo--p2 {
          top: -1rem;
          transform: scale(1.3);
          z-index: 100; } }
    .composition__photo--p3 {
      top: 10rem;
      left: 20%; }
      @media only screen and (max-width: 56.25em) {
        .composition__photo--p3 {
          top: 1rem;
          left: 0;
          transform: scale(1.1); } }
    .composition__photo:hover {
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      outline: 1rem solid #55c57a;
      z-index: 20; }
      @media only screen and (max-width: 56.25em) {
        .composition__photo:hover {
          outline: 0.5rem solid #55c57a;
          transform: scale(1.05) translateY(0.5rem); } }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.6rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 0.3rem;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform 0.3s; }
  @media only screen and (max-width: 56.25em) {
    .feature-box {
      padding: 2rem; } }
  .feature-box__icon {
    font-size: 6rem;
    display: inline-block;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    color: transparent;
    margin-bottom: 0.5rem; }
    @media only screen and (max-width: 56.25em) {
      .feature-box__icon {
        margin-bottom: 0rem; } }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03); }

.card {
  perspective: 150rem;
  position: relative;
  height: 52rem; }
  .card__side {
    transition: all 0.8s ease;
    position: absolute;
    top: 0;
    left: 0;
    backface-visibility: hidden;
    width: 100%;
    height: 52rem;
    border-radius: 0.3rem;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
    overflow: hidden; }
    .card__side--front {
      background-color: #fff; }
    .card__side--back {
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back-2 {
        background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back-3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0deg); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    /* work with background-image with linear gradient to make opacity on image */
    background-blend-mode: screen;
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%); }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/nat-6.jpg); }
    .card__picture--3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../img/nat-7.jpg); }
  .card__heading {
    position: absolute;
    top: 12rem;
    right: 2rem;
    text-align: right;
    text-transform: uppercase;
    font-weight: 300;
    font-size: 2.8rem;
    color: #fff;
    width: 75%; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    /* if the single box divide into 2 box,
        it will apply border and padding for each box not to single box */
    -webkit-box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto; }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 0.1rem solid #eee; }
  .card__cta {
    position: absolute;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center; }
  .card__price-box {
    margin-bottom: 8rem;
    color: #fff; }
  .card__price-only {
    text-transform: uppercase;
    font-size: 1.4rem; }
  .card__price-value {
    font-weight: 100;
    font-size: 6rem; }
  @media only screen and (max-width: 56.25em), only screen and (hover: none) {
    .card {
      height: auto;
      border-radius: 0.3rem;
      background-color: #fff;
      box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
      .card__side {
        height: auto;
        position: relative;
        box-shadow: none; }
        .card__side--back {
          transform: rotateY(0deg);
          clip-path: polygon(0 12%, 100% 0, 100% 100%, 0 100%); }
      .card:hover .card__side--front {
        transform: rotateY(0deg); }
      .card__details {
        padding: 1rem 3rem; }
      .card__cta {
        position: relative;
        top: 0;
        left: 0;
        transform: translate(0);
        width: 100%;
        padding: 7rem 4rem 4rem 4rem; }
      .card__price-box {
        margin-bottom: 3rem; }
      .card__price-value {
        font-size: 4rem; } }

.story {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.15);
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 0.3rem;
  padding: 6rem;
  padding-left: 9rem;
  font-size: 1.6rem;
  transform: skewX(-12deg); }
  @media only screen and (max-width: 56.25em) {
    .story {
      padding: 4rem;
      padding-left: 7rem;
      width: 100%; } }
  @media (max-width: 37.5em) {
    .story {
      transform: skewX(0deg); } }
  .story__shape {
    position: relative;
    width: 15rem;
    height: 15rem;
    float: left;
    shape-outside: circle(50% at 50% 50%);
    /*  it make outside text lie as Crescent on circle as shown in this example */
    clip-path: circle(50% at 50% 50%);
    /* this make the element as circle,  clip-path: circle(diameter, position x, position y) */
    transform: translateX(-3rem) skewX(13deg); }
    @media (max-width: 37.5em) {
      .story__shape {
        transform: translateX(-2rem) skewX(0deg); } }
  .story__image {
    height: 100%;
    transform: translateX(-4rem) scale(1.4);
    transition: all 0.5s;
    backface-visibility: hidden; }
  .story__caption {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 20%);
    color: #fff;
    font-size: 1.7rem;
    text-transform: uppercase;
    text-align: center;
    opacity: 0;
    backface-visibility: hidden;
    transition: all 0.5s; }
  .story__text {
    transform: skewX(12deg); }
    @media (max-width: 37.5em) {
      .story__text {
        transform: skewX(0deg); } }
  .story:hover .story__caption {
    transform: translate(-50%, -50%);
    opacity: 1; }
  .story:hover .story__image {
    transform: translateX(-4rem) scale(1);
    /* it make an blur on image and you can adjust this blur and adjust btightness of it
        there is many filter you can use */
    filter: blur(0.3rem) brightness(80%); }

.bg-video {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  opacity: 0.2;
  overflow: hidden; }
  .bg-video__content {
    width: 100%;
    height: 100%;
    object-fit: cover;
    /* it make the content fit all size of the parent */ }

.form {
  /* make this style for this element when the placeholder is hidden,
      if we write on input and placeholder is hidden so, make this style */ }
  .form__group:not(:last-child) {
    margin-bottom: 2rem; }
  .form__input {
    display: block;
    width: 90%;
    font-size: 1.5rem;
    font-family: inherit;
    padding: 1.5rem 2rem;
    border-radius: 0.2rem;
    background-color: rgba(255, 255, 255, 0.5);
    border: none;
    border-bottom: 0.3rem solid transparent;
    /* make this style when focus on this input */
    /* make this style when focus on this input and it is invalid */ }
    @media only screen and (max-width: 56.25em) {
      .form__input {
        width: 100%; } }
    .form__input:focus {
      outline: none;
      border-bottom: 0.3rem solid #7ed56f; }
    .form__input:focus:invalid {
      border-bottom: 0.3rem solid #ff7730; }
    .form__input::-webkit-input-placeholder {
      color: #999; }
  .form__label {
    display: block;
    font-size: 1.2rem;
    font-weight: 700;
    margin-left: 2rem;
    margin-top: 0.7rem;
    transition: all 0.5s; }
  .form__input:placeholder-shown + .form__label {
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4rem); }
  .form__radio-group {
    width: 49%;
    display: inline-block; }
    @media only screen and (max-width: 56.25em) {
      .form__radio-group {
        width: 100%;
        margin-bottom: 2rem; } }
  .form__radio-input {
    display: none; }
  .form__radio-label {
    font-size: 1.6rem;
    cursor: pointer;
    position: relative;
    padding-left: 4.5rem; }
  .form__radio-btn {
    display: inline-block;
    width: 3rem;
    height: 3rem;
    border: 0.5rem solid #55c57a;
    border-radius: 50%;
    position: absolute;
    top: -0.4rem;
    left: 0; }
    .form__radio-btn::after {
      content: "";
      display: block;
      height: 1.3rem;
      width: 1.3rem;
      border-radius: 50%;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: #55c57a;
      opacity: 0;
      transition: opacity 0.2s; }
  .form__radio-input:checked ~ .form__radio-label .form__radio-btn::after {
    opacity: 1; }

.popup {
  height: 100vh;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.8);
  z-index: 9999;
  opacity: 0;
  visibility: hidden;
  transition: all 0.4s;
  /* if we define id for this section, this id is be on url, so make this style */ }
  .popup__content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 75%;
    background-color: #fff;
    box-shadow: 0 2rem 4rem rgba(0, 0, 0, 0.2);
    border-radius: 0.3rem;
    display: table;
    overflow: hidden;
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.25);
    transition: all 0.5s 0.2s; }
  .popup__left {
    width: calc(100% / 3);
    display: table-cell; }
    @media only screen and (max-width: 56.25em) {
      .popup__left {
        display: table-row; } }
  .popup__right {
    width: calc(2 * (100% / 3));
    display: table-cell;
    vertical-align: middle;
    padding: 3rem 5rem; }
  .popup__img {
    display: block;
    width: 100%; }
    @media only screen and (max-width: 56.25em) {
      .popup__img {
        vertical-align: middle;
        width: 50%;
        display: unset; } }
  .popup__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;
    column-count: 2;
    column-gap: 4rem;
    column-rule: 0.1rem solid #eee;
    /* auto --> if the text will be more than it's width it break it in new line
                and put (-) between it
      manual --> used if you want to put (-) manually */
    hyphens: auto;
    line-height: 2.5rem; }
  .popup:target {
    opacity: 1;
    visibility: visible; }
  .popup:target .popup__content {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1); }
  .popup__close:link, .popup__close:visited {
    color: #777;
    position: absolute;
    top: 2.5rem;
    right: 2.5rem;
    font-size: 3rem;
    text-decoration: none;
    display: inline-block;
    transition: all 0.4s;
    line-height: 1; }
  .popup__close:hover {
    color: #55c57a; }

.navigation__checkbox {
  display: none; }

.navigation__btn {
  background-color: #fff;
  height: 7rem;
  width: 7rem;
  position: fixed;
  top: 6rem;
  right: 6rem;
  border-radius: 50%;
  z-index: 2000;
  box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.1);
  text-align: center; }
  @media only screen and (max-width: 56.25em) {
    .navigation__btn {
      top: 3rem;
      right: 4.5rem; } }
  @media (max-width: 37.5em) {
    .navigation__btn {
      top: 2.5rem;
      right: 3rem; } }

.navigation__background {
  height: 6rem;
  width: 6rem;
  border-radius: 50%;
  position: fixed;
  top: 6.5rem;
  right: 6.5rem;
  background-image: radial-gradient(#7ed56f, #28b485);
  z-index: 1000;
  transition: transform 0.8s cubic-bezier(0.68, 0, 0.07, 1); }
  @media only screen and (max-width: 56.25em) {
    .navigation__background {
      top: 3.5rem;
      right: 4.5rem; } }
  @media (max-width: 37.5em) {
    .navigation__background {
      top: 3rem;
      right: 3rem; } }

.navigation__icon {
  position: relative;
  margin-top: 3.4rem;
  cursor: pointer; }
  .navigation__icon, .navigation__icon::after, .navigation__icon::before {
    width: 3rem;
    height: 0.2rem;
    display: inline-block;
    background-color: #333;
    transition: all 0.2s; }
  .navigation__icon::after, .navigation__icon::before {
    content: "";
    position: absolute;
    left: 0; }
  .navigation__icon::after {
    top: -0.9rem; }
  .navigation__icon::before {
    top: 0.9rem; }

.navigation__btn:hover .navigation__icon:after {
  top: -1.1rem; }

.navigation__btn:hover .navigation__icon:before {
  top: 1.1rem; }

.navigation__nav {
  height: 100vh;
  width: 0;
  opacity: 0;
  position: fixed;
  top: 0;
  right: 0;
  z-index: 1500;
  transition: all 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55); }

.navigation__list {
  list-style: none;
  text-align: center;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%; }

.navigation__item {
  margin: 1rem; }

.navigation__link:link, .navigation__link:visited {
  display: inline-block;
  font-size: 3rem;
  font-weight: 300;
  color: #fff;
  padding: 1rem 2rem;
  text-decoration: none;
  text-transform: uppercase;
  background-image: linear-gradient(120deg, transparent 50%, #fff 50%);
  background-size: 230%;
  transition: all 0.4s; }

.navigation__link:hover, .navigation__link:active {
  background-position: 100%;
  color: #55c57a;
  transform: translateX(1rem); }

.navigation__checkbox:checked ~ .navigation__background {
  transform: scale(80); }

.navigation__checkbox:checked ~ .navigation__nav {
  width: 100%;
  opacity: 1; }

.navigation__checkbox:checked + .navigation__btn .navigation__icon {
  background-color: transparent; }
  .navigation__checkbox:checked + .navigation__btn .navigation__icon::after {
    top: 0;
    transform: rotate(135deg); }
  .navigation__checkbox:checked + .navigation__btn .navigation__icon::before {
    top: 0;
    transform: rotate(-135deg); }

.header {
  height: 95vh;
  /* linear-gradient --> make a mix between 2 color in a gradient way, it used to make overlay on image
      - at first you should specify direction of gradient
      - then specify colors
    */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero-small.jpg);
  background-size: cover;
  /* this tell the browser focus on the top of image rather than any side,
      so if you make screen smaller than the image it will concern on the top of image
      this is for any direction you want not top only
   */
  background-position: top;
  /* clip-path:polygon(x y, x y, x y, x y, x y, ...etc) 
      in clip path you can cut the section to draw any thing you want by specify 
      the start point and the end point of each corner to get final result
    */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative; }
  @media (min-resolution: 192dpi) and (min-width: 37.5em), (min-width: 125em) {
    .header {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg); } }
  @media (max-width: 37.5em) {
    .header {
      clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%); } }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center; }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
    @media only screen and (max-width: 56.25em) {
      .row:not(:last-child) {
        margin-bottom: 6rem; } }
  @media only screen and (max-width: 56.25em) {
    .row {
      max-width: 50rem;
      padding: 0 3rem; } }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
      @media only screen and (max-width: 56.25em) {
        .row [class^="col-"]:not(:last-child) {
          margin-right: 0;
          margin-bottom: 6rem; } }
    @media only screen and (max-width: 56.25em) {
      .row [class^="col-"] {
        width: 100% !important; } }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 *6rem) / 3); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2 *6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 *6rem) / 4); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 *6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 *6rem) / 4) + 2 *6rem); }

.footer {
  background-color: #333;
  padding: 10rem 0;
  font-size: 1.4rem; }
  @media only screen and (max-width: 56.25em) {
    .footer {
      padding: 8rem 0; } }
  .footer__logo-box {
    text-align: center;
    margin-bottom: 8rem; }
    @media only screen and (max-width: 56.25em) {
      .footer__logo-box {
        margin-bottom: 6rem; } }
  .footer__logo {
    width: 15rem;
    height: auto; }
  .footer__navigation {
    border-top: 0.1rem solid #eee;
    padding-top: 2rem;
    display: inline-block; }
    @media only screen and (max-width: 56.25em) {
      .footer__navigation {
        width: 100%;
        text-align: center; } }
  .footer__list {
    list-style: none; }
  .footer__item {
    display: inline-block; }
    .footer__item:not(:last-child) {
      margin-right: 1.5rem; }
  .footer__link:link, .footer__link:visited {
    color: #f7f7f7;
    background-color: #333;
    text-decoration: none;
    text-transform: uppercase;
    display: inline-block;
    transition: all 0.2s; }
  .footer__link:hover, .footer__link:active {
    color: #55c57a;
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.4);
    transform: rotate(5deg) scale(1.3); }
  .footer__copyright {
    border-top: 0.1rem solid #eee;
    padding-top: 2rem;
    width: 80%;
    float: right; }
    @media only screen and (max-width: 56.25em) {
      .footer__copyright {
        width: 100%;
        float: none; } }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }
  @media only screen and (max-width: 56.25em) {
    .section-about {
      padding: 20rem 0; } }

.section-features {
  background-color: #28b485;
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(/img/nat-4.jpg);
  background-size: cover;
  transform: skewY(-4deg);
  margin-top: -10rem; }
  .section-features > * {
    /* the previous selector mean--> apply this style for all direct child of the section-features */
    transform: skewY(4deg); }
  @media only screen and (max-width: 56.25em) {
    .section-features {
      padding: 10rem 0; } }

.section-tours {
  background-color: #f7f7f7;
  padding: 20rem 0 15rem 0;
  margin-top: -10rem; }
  @media only screen and (max-width: 56.25em) {
    .section-tours {
      padding: 17rem 0 10rem 0; } }

.section-stories {
  position: relative;
  padding: 15rem 0; }
  @media only screen and (max-width: 56.25em) {
    .section-stories {
      padding: 10rem 0; } }

.section-book {
  padding: 15rem 0;
  background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
  @media only screen and (max-width: 56.25em) {
    .section-book {
      padding: 10rem 0; } }

.book {
  /* we can  use degree to specify from any direction you will start,
      and  put percentage of each color beside it to define how much this color will take from gradient
      directions start from 0% and end to 100%,
      EX: linear-gradient(90deg, red 10%, yellow 30%, black  30%)
          * 90deg --> this is direction
          * red will start from 0% to 10%
          * yellow will start from 10% to 30%
          * black will start from 30% to the end
          ** the previous color and the next color overlapped in gradient way
       */
  background-image: linear-gradient(105deg, rgba(255, 255, 255, 0.9) 50%, transparent 50%), url(/img/nat-10.jpg);
  background-size: 100%;
  border-radius: 0.3rem;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.2); }
  @media only screen and (max-width: 75em) {
    .book {
      background-image: linear-gradient(105deg, rgba(255, 255, 255, 0.9) 65%, transparent 65%), url(/img/nat-10.jpg);
      background-size: cover; } }
  @media only screen and (max-width: 56.25em) {
    .book {
      background-image: linear-gradient(to right, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.9) 65%), url(/img/nat-10.jpg);
      background-size: cover; } }
  .book__form {
    width: 50%;
    padding: 6rem; }
    @media only screen and (max-width: 75em) {
      .book__form {
        width: 65%; } }
    @media only screen and (max-width: 56.25em) {
      .book__form {
        width: 100%; } }

/*
  [NOTES]
    * we can make a style for an element using it's attribute like:- src, href ...etc
      - EX: [src="source"]{} ==> this mean make a style for this element that contain this attribute value.

    * we can use ($, *, ^) before (=) in previous example 
      ** $ --> mean make this style for all elements which this attribute ends with this value
      ** * --> mean make this style for all elements which this attribute contain this value
      ** ^ --> mean make this style for all elements which this attribute start with this value

    * ( :not(element){styles} ) --> this mean make these containing styles for all element except this element
      - this element may be pseudo code like (:last-child, :first-child ...etc) 

    * if we use calc() function in sass file with variable we must
      use variable inside curly parentheses and put (#) before it
      - EX: 
            ** calc(100% - variable)  --> this is correct
            ** calc(100% - variable)     --> this is incorrect

*/
